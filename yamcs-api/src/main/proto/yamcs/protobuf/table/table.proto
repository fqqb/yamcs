syntax = "proto2";

package yamcs.protobuf.table;

import "yamcs/api/annotations.proto";
import "yamcs/protobuf/yamcs.proto";
import "yamcs/protobuf/yamcsManagement/yamcsManagement.proto";

option java_package = "org.yamcs.protobuf";

// Service for reading and writing to Yarch tables and streams
service TableApi {

  // Execute SQL
  rpc ExecuteSql(ExecuteSqlRequest) returns (ExecuteSqlResponse) {
    option (yamcs.api.route) = {
      post: "/api/archive/{instance}:executeSql"
      body: "*"
    };
  }
  
  // List streams
  rpc ListStreams(ListStreamsRequest) returns (ListStreamsResponse) {
    option (yamcs.api.route) = {
      get: "/api/archive/{instance}/streams"
    };
  }
  
  // Receive updates on stream stats
  rpc SubscribeStreamStatistics(SubscribeStreamStatisticsRequest) returns (stream yamcsManagement.StreamEvent) {
    option (yamcs.api.websocket) = {
      topic: "stream-stats"
    };
  }
  
  // Get a stream
  rpc GetStream(GetStreamRequest) returns (StreamInfo) {
    option (yamcs.api.route) = {
      get: "/api/archive/{instance}/streams/{name}"
    };
  }
  
  // Receive stream updates
  rpc SubscribeStream(SubscribeStreamRequest) returns (stream StreamData) {
    option (yamcs.api.websocket) = {
      topic: "stream"
    };
  }
  
  // List tables
  rpc ListTables(ListTablesRequest) returns (ListTablesResponse) {
    option (yamcs.api.route) = {
      get: "/api/archive/{instance}/tables"
    };
  }
  
  // Get a table
  rpc GetTable(GetTableRequest) returns (TableInfo) {
    option (yamcs.api.route) = {
      get: "/api/archive/{instance}/tables/{name}"
    };
  }
  
  // Get table data
  rpc GetTableData(GetTableDataRequest) returns (TableData) {
    option (yamcs.api.route) = {
      get: "/api/archive/{instance}/tables/{name}/data"
    };
  }
  
  // Streams back the contents of all rows in key order
  rpc ReadRows(ReadRowsRequest) returns (stream Row) {
    option (yamcs.api.route) = {
      post: "/api/archive/{instance}/tables/{table}:readRows"
      body: "*"
    };
  }
  
  // Imports a stream of rows
  rpc WriteRows(stream WriteRowsRequest) returns (WriteRowsResponse) {
    option (yamcs.api.route) = {
      post: "/api/archive/{instance}/tables/{table}:writeRows"
      body: "row"
    };
  }
}

message Row {
  message ColumnInfo {
    optional uint32 id = 1;
    optional string name = 2;  
    optional string type = 3;
    optional string protoClass = 4; //the name of the class implementing the proto object if the dataType=PROTOBUF
  }

  message Cell {
    optional uint32 columnId = 1; 
    optional bytes data = 2;
  }

  //the column info is only present for new columns in a stream of Row messages
  repeated ColumnInfo columns = 1; 
  repeated Cell cells = 2;   
}  

message ReadRowsRequest {
  optional string instance = 1;
  optional string table = 2;
  repeated string cols = 3;
}

message WriteRowsRequest {
  optional string instance = 1;
  optional string table = 2;
  optional Row row = 3;
}

message WriteRowsResponse {
  optional uint32 count = 1;
}

message WriteRowsExceptionDetail {
  optional uint32 count = 1;
}

message ExecuteSqlRequest {
  optional string instance = 1;
  optional string statement = 2;
}

message ExecuteSqlResponse {
  optional string result = 1;
}

message ListTablesRequest {
  optional string instance = 1;
}

message ListTablesResponse {
  repeated TableInfo tables = 1;
}

message GetTableRequest {
  optional string instance = 1;
  optional string name = 2;
}

message GetTableDataRequest {
  optional string instance = 1;
  optional string name = 2;
  repeated string cols = 3;
  optional int64 pos = 4;
  optional int32 limit = 5;
  optional string order = 6;
}

message ListStreamsRequest {
  optional string instance = 1;
}

message ListStreamsResponse {
  repeated StreamInfo streams = 1;
}

message GetStreamRequest {
  optional string instance = 1;
  optional string name = 2;
}

message SubscribeStreamRequest {
  optional string instance = 1;
  optional string stream = 2;
}

message ColumnData {
  optional string name = 1;
  optional Value value = 2;
}

message StreamData {
  optional string stream = 1;
  repeated ColumnData column = 2;
}

message SubscribeStreamStatisticsRequest {
  optional string instance = 1;
}

message TableData {
  message TableRecord {
    repeated ColumnData column = 1;
  }
  repeated TableRecord record = 1;
}

message ColumnInfo {
  optional string name = 1;
  optional string type = 2;
  repeated EnumValue enumValue = 3;
}

message EnumValue {
  optional int32 value = 1;
  optional string label = 2;
}

message TableInfo {
  optional string name = 1;
  repeated ColumnInfo keyColumn = 2;
  repeated ColumnInfo valueColumn = 3;
  optional string script = 4;
  repeated string histogramColumn = 5;
  optional string storageEngine = 6;
  optional int32 formatVersion = 7;
  optional string tablespace = 8;
  optional bool compressed = 9;
  optional PartitioningInfo partitioningInfo = 10;
}

message PartitioningInfo {
  enum PartitioningType {
    TIME = 1;
    VALUE = 2;
    TIME_AND_VALUE = 3;
  }
  optional PartitioningType type = 1;
  optional string timeColumn = 2;
  optional string timePartitionSchema = 3;
  optional string valueColumn = 4;
  optional string valueColumnType = 5;
}

message StreamInfo {
  optional string name = 1;
  repeated ColumnInfo column = 2;
  optional string script = 3;
  optional int64 dataCount = 4;
}
